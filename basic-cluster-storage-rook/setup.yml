---
- hosts: all
  become: yes
  become_method: sudo
  vars:
    kernel_modules:
      - br_netfilter
      - overlay
      - ip_vs
      - ip_vs_rr
      - ip_vs_wrr
      - ip_vs_sh
      - nf_conntrack
    kubernetes_version: "1.28"
    required_packages:
      - vim
      - wget
      - curl
    timezone: "America/Chicago"
  tasks:
    - name: Add Docker repository
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docer-ce.repo

    - name: Add kubernetes repository
      ansible.builtin.template:
        src: 'kubernetes.repo.j2'
        dest: /etc/yum.repos.d/kubernetes.repo

    - name: "Update system packages"
      ansible.builtin.package:
        name: "*"
        state: latest

    - name: Install required package
      ansible.builtin.package:
        name: "{{ item }}"
      with_items:
        - "{{ required_packages }}"

    - name: Install Kubernetes packages
      ansible.builtin.yum:
        name: ['kubelet', 'kubeadm', 'kubectl']
        disable_excludes: kubernetes

    - name: Disable SELinux completely
      ansible.builtin.lineinfile:
        path: /etc/sysconfig/selinux
        regexp: "^SELINUX=.*"
        line: "SELINUX=disabled"

    - name: Enable kernel modules
      ansible.builtin.template:
        src: kernel_modules.conf.j2
        dest: /etc/modules-load.d/kubernetes.conf

    - name: Update kernel settings
      ansible.posix.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
      ignore_errors: yes
      with_items:
        - { name: net.bridge.bridge-nf-call-arptables, value: 1 }
        - { name: net.bridge.bridge-nf-call-ip6tables, value: 1 }
        - { name: net.bridge.bridge-nf-call-iptables, value: 1 }
        - { name: net.ipv4.ip_forward, value: 1 }

    - name: TEST sysctl
      ansible.builtin.copy:
        dest: "/etc/sysctl.d/10-k8s.conf"
        content: |
          net.bridge.bridge-nf-call-arptables=1
          net.bridge.bridge-nf-call-ip6tables=1
          net.bridge.bridge-nf-call-iptables=1

    - name: Disable SWAP in fstab
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+.*)$'
        replace: '# \1'

    - name: Reboot system
      ansible.builtin.reboot:
        reboot_timeout: 120

    - name: Stop and Disable firewall (firewalld)
      ansible.builtin.service:
        name: firewalld
        state: stopped
        enabled: no

    - name: Enable kubelet service
      ansible.builtin.service:
        name: kubelet
        enabled: yes

    - name: Load required modules
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      with_items: "{{ kernel_modules }}"

    - name: Install containerd
      ansible.builtin.package:
        name: ['containerd.io']
        state: present

    - name: Create containerd directories
      ansible.builtin.file:
        path: /etc/containerd
        state: directory

    - name: Configure containerd
      ansible.builtin.shell: containerd config default > /etc/containerd/config.toml

    - name: Enable cgroup driver as systemd
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup \= false'
        line: 'SystemdCgroup = true'

    - name: Start and enable containerd service
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Enable kubelet service
      ansible.builtin.service:
        name: kubelet
        enabled: yes

    # Control Plane Tasks
    - name: Pull required containers
      ansible.builtin.shell: "kubeadm config images pull >/dev/null 2>&1"
      when: ansible_hostname == "control-plane01"

    - name: Initialize Kubernetes Cluster
      ansible.builtin.shell: "kubeadm init --apiserver-advertise-address={{ }} --pod-network-cidr={{ pod_network_cidr }} >> /root/kubeinit.log 2> /dev/null"
      when: ansible_hostname == "control-plane01"

    - name: Deploy Calico network
      ansible.builtin.shell: "kubectl --kubeconfig=/etc/kubernetes/admin.conf create -f https://docs.projectcalico.org/v3.18/manifests/calico.yaml >/dev/null 2>&1"
      ignore_errors: yes
      when: ansible_hostname == "control-plane01"

    - name: Generate and save cluster join command
      ansible.builtin.shell: "kubeadm token create --print-join-command > /joincluster.sh 2>/dev/null"
      when: ansible_hostname == "control-plane01"

    - name: Download join command
      ansible.builtin.fetch:
        dest: './'
        flat: yes
        src: '/joincluster.sh'
      when: ansible_hostname == "control-plane01"

    - name: Download admin.conf
      ansible.builtin.fetch:
        dest: "./"
        flat: yes
        src: "/etc/kubernetes/admin.conf"
      when: ansible_hostname == "control-plane01"

    - name: "Add control-plane role to {{ ansible_hostname }}"
      ansible.builtin.shell: "kubectl -f /etc/kubernetes/admin.conf label node {{ ansible_hostname }}.example.com node-role.kubernetes.io/control-plane=control-plane"
      when: ansible_hostname == 'control-plane02' or ansible_hostname == 'control-plane03'
      delegate_to: "control-plane01"


    # Worker Tasks
    - name: Upload join command
      ansible.builtin.copy:
        src: joincluster.sh
        dest: /joincluster.sh
        owner: root
        group: root
        mode: "0777"
      when: ansible_hostname != "control-plane01"

    - name: Reset
      ansible.builtin.shell: "kubeadm reset -f"
      when: ansible_hostname != "control-plane01"

    - name: Join node to cluster
      ansible.builtin.shell: "/joincluster.sh > /dev/null 2&>1"
      when: ansible_hostname != "control-plane01"